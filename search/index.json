[{"content":"本模块主要是对学成在线项目的课程信息做管理，包括了课程的查询，增加等内容\n1. 模块的需求分析 1.1 什么是需求分析 百度百科对需求分析的定义如下： 需求分析也称为软件需求分析、系统需求分析或需求分析工程等，是开发人员经过深入细致的调研和分析，准确理解用户和项目的功能、性能、可靠性等具体要求，将用户非形式的需求表述转化为完整的需求定义，从而确定系统必须做什么的过程。\n简单理解就是要搞清楚问题域，问题域就是用户的需求，软件要为用户解决什么问题，实现哪些功能，满足什么样的性能要求。\n如何作需求分析\n首先确认用户需求\n用户需求即用户的原始需求。通过用户访谈、问卷调查、开会讨论、查阅资料等调研手段梳理用户的原始需求。\n产品人员根据用户需求会绘制界面原型，通过界面原型再和用户确认需求。\n确认关键问题\n用户的原始需求可能 是含糊不清的，需求分析要从繁杂的问题中梳理出关键问题。比如：教学机构的老师想要将课程发布到网上，这是原始需求，根据这个用户需求我们需要进行扩展分析，扩展出几下几点：\n课程发布需要发布哪些信息 如果发布了不良信息怎么办？ 课程发布后用户怎么查看课程？ 例如：课程发布需要课程名称、课程介绍、课程价格、课程图片、师资等信息。继续延申分析：这么多课程信息进行归类，方便用户编辑，分为课程基本信息、课程营销信息、课程师资等信息。\n按照这样的思路对用户需求逐项分析，梳理出若干问题，再从中找到关键问题。比如：上边对课程信息分类后，哪些是关键信息，课程名称、课程图片、课程介绍等基本信息为关键信息，所以发布课程的第一步要编写课程基本信息。\n找到了关键问题，下一步就可以进行数据建模，创建课程基本信息表，并设计其中的字段。\n梳理业务流程\n业务流程是由一个或多个用户参与完成为了完成一个目标所进行的一系列的业务操作，不论是整个系统还是一个模块通常首先分析核心的业务流程，比如：内容管理模块的核心业务流程是课程发布，本项目的核心业务流程是学生选课学习流程。 数据建模\n数据建模要根据分析的关键问题将其相关的信息全部建模。比如：根据发布课程的用户需求，可创建课程基本信息表、课程营销信息表、课程师资表、课程发布记录表、课程审核记录表等。 编写需求规格说明书\n需求分析阶段的成果物是需求分析规格说明书，针对每一个问题编写需求用例，需求用例包括：功能名称、功能描述、参与者、基本事件流程、可选事件流、数据描述、前置条件、后置条件等内容。\n这里以添加课程的需求为例：\n项目 添加课程 功能名称 添加课程 功能描述 添加课程基本信息 参与者 教学机构管理员 前置条件 教学机构管理只允许向自己机构添加课程 拥有添加课程的权限 基本事件流程 1、登录教学机构平台 2、进入课程列表页面 3、点击添加课程按钮进入添加课程界面 4、填写课程基本信息 5、点击提交。 可选事件流程 成功：提示添加成功，跳转到课程营销信息添加界面 失败：提示具体的失败信息，用户根据失败信息进行修改。 数据描述 课程基本信息：课程id、课程名称、课程介绍、课程大分类、课程小分类、课程等级、课程图片、所属机构、课程创建时间、课程修改时间、课程状态 后置条件 向课程基本信息插入一条记录 补充说明 1.2模块介绍 内容管理这个词存在于很多软件系统，什么是内容管理 ？\n百度百科解释如下：\n内容管理系统（content management system，CMS），是一种位于WEB前端（Web 服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。这里指的“内容”可能包括文件、表格、图片、数据库中的数据甚至视频等一切你想要发布到Internet、Intranet以及Extranet网站的信息。\n本项目作为一个大型的在线教育平台，其内容管理模块主要对课程及相关内容进行管理，包括：课程的基本信息、课程图片、课程师资信息、课程的授课计划、课程视频、课程文档等内容的管理。\n1.3 业务流程 内容管理的业务由教学机构人员和平台的运营人员共同完成。\n教学机构人员的业务流程如下：\n登录教学机构。 维护课程信息，添加一门课程需要编辑课程的基本信息、上传课程图片、课程营销信息、课程计划、上传课程视频、课程师资信息等内容。 课程信息编辑完成，通过课程预览确认无误后提交课程审核。 待运营人员对课程审核通过后方可进行课程发布。 运营人员的业务流程如下：\n查询待审核的课程信息。 审核课程信息。 提交审核结果。 下图是课程编辑与发布的整体流程\n1.4 界面原型 产品工程师根据用户需求制作产品界面原型，开发工程师除了根据用户需求进行需求分析以外，还会根据界面原型上的元素信息进行需求分析。 1.5 数据模型 数据模型就是对应的数据表的设计，内容管理模块涉及9张基础表，如下所示：\n2. 创建模块工程 2.1 模块工程结构 在第一章节创建了项目的父工程以及项目基础工程，如下图：\n下面就要创建内容管理模块的工程结构。本项目是一个前后端分离项目，前端与后端开发人员之间主要依据接口进行开发。下图是前后端交互的流程图：\n前端请求后端服务提供的接口。（通常为http协议 ） 后端服务的控制层Controller接收前端的请求。 Contorller层调用Service层进行业务处理。 Service层调用Dao持久层对数据持久化。 整个流程分为前端、接口层和业务层三部分。故模块工程的结构如下所示：\nxuecheng-plus-content-api：接口工程，为前端提供接口。 xuecheng-plus-content-service: 业务工程，为接口工程提供业务支撑。 xuecheng-plus-content-model: 数据模型工程，存储数据模型类、数据传输类型等。 将项目父工程及项目基础工程与之结合可得下图：\nxuecheng-plus-content：内容管理模块工程，负责聚合xuecheng-plus-content-api、xuecheng-plus-content-service、xuecheng-plus-content-model。 聚合项目又称为多模块项目，这种结构的目的是为了统一构建项目，也就是说我对根项目的任何mvn 命令操作，都会相应的执行到每一个被聚合的module项目中。\n聚合项目，根模块的打包方式必须为pom。 通过 \u0026lt;module\u0026gt; 标签指定被聚合的模块。 被聚合的模块根本无法感知到根模块的存在。 父子模块这种项目结构，本质上就是继承关系。聚合模块结构没有上下级区分，但这里的父子模块就要区分上下级了（这里的上下级不是指文件目录的上下级），子模块会继承父模块的相关依赖配置。\n父模块的打包方式必须为pom。\n子模块需要通过 \u0026lt;parent\u0026gt; 标签指定父模块的坐标。然后自由选择需要的依赖，如果此依赖在父模块已指定版本，则子模块不需要再管理版本。\n父模块的groupId和version会传递到子模块，父子模块作为一个整体，子模块不需要再声明，仅需要指定自己独有的artifactId即可，当然如果你依赖的父模块和你的项目不是同一个groupId时，你也可以指定子模块的groupId和version；\n父模块的依赖配置会传递到子模块，子模块不需要再单独引入依赖；\n父模块可以通过\u0026lt;dependencyManagement\u0026gt;管理依赖的版本，子模块可以自由灵活的选择需要的依赖，不需要再关心版本的问题。\n父子模块正好相反，父模块根本无法感知到哪个子模块把它当作爸爸。\n最佳实战\n在我们实际开发中，一般都是将聚合和父子这两种关系混合使用 不论父子模块还是聚合模块，根模块的打包方式都必须是pom，下面的模块可以是jar或者war这两种打包方式。 聚合模块这种项目结构，仅仅是为了方便统一管理操作所有的模块。根模块和它内部\u0026lt;module\u0026gt; 标签内的模块是一个整体，项目目录层级上可以不要求一定上下级，但必须保持一定的层级联系。你不能用自己创建的项目去管理操作spring的项目。 父子模块这种项目结构，仅仅是为了方便子模块对依赖的管理，子模块通过\u0026lt;parent\u0026gt; 标签，引入父模块的配置去约束子模块的依赖版本。也可以抽出共同的依赖给到父模块，子模块去继承它，减少每个子模块冗余的配置。项目层级没有要求，你可以引入任意的依赖当作父模块，比如spring-boot-starter。 2.2 创建模块工程 首先在项目根目录创建内容管理模块的父工程xuecheng-plus-content\n创建完成，只保留pom.xml文件，删除多余的文件。内容管理父工程的主要职责是聚合内容管理接口和内容管理接口实现两个工程，它的父工程是xuecheng-plus-parent。pom.xml如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;!-- 父工程为项目父工程xuecheng-plus-parent --\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-parent\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;relativePath\u0026gt;../xuecheng-plus-parent\u0026lt;/relativePath\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content\u0026lt;/artifactId\u0026gt; \u0026lt;name\u0026gt;xuecheng-plus-content\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;xuecheng-plus-content\u0026lt;/description\u0026gt; \u0026lt;!-- 其本身既是内容管理其他模块的父工程也是模块聚合的跟工程 --\u0026gt; \u0026lt;!-- 所以打包方式必须为pom --\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;!-- 聚合的模块 --\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;xuecheng-plus-content-api\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;xuecheng-plus-content-model\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;xuecheng-plus-content-service\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt; \u0026lt;/project\u0026gt; 由于xuecheng-plus-content-api、xuecheng-plus-content-service及xuecheng-plus-content-model三个工程还没有创建所以modules报错。\n在xuecheng-plus-content下创建xuecheng-plus-content-model数据模型工程。\n创建完成，只保留包和pom.xml文件 ，删除多余的文件。修改pom.xml文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content-model\u0026lt;/artifactId\u0026gt; \u0026lt;!-- 基本所有工程都会依赖于基础工程 --\u0026gt; \u0026lt;!-- 引入基础工程依赖 --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-base\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 在xuecheng-plus-content下创建xuecheng-plus-content-service接口实现工程。\n创建完成，只保留包(即src包)和pom.xml文件 ，删除多余的文件，pom.xml如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content-service\u0026lt;/artifactId\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content-model\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 在xuecheng-plus-content下创建xuecheng-plus-content-api接口工程。\n创建完成，只保留包(即src包)和pom.xml文件 ，删除多余的文件，pom.xml如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content-api\u0026lt;/artifactId\u0026gt; \u0026lt;!-- 引入service包会传递依赖项目基础工程 --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-content-service\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; xuecheng-plus-content-api接口工程的父工程是xuecheng-plus-content，它依赖了xuecheng-plus-base基础工程。\n到此内容管理模块的四个工程创建完毕，工程结构图如下：\n3. 课程查询 3.1 需求分析 3.1.1 业务流程 教学机构人员点击课程管理首先进入课程查询界面 在课程进行列表查询页面输入查询条件查询课程信息 当不输入查询条件时输入全部课程信息。 输入查询条件查询符合条件的课程信息。 约束：本教学机构查询本机构的课程信息。 3.1.2 数据模型 课程查询功能涉及的数据表有两个：课程基本信息表和课程营销表\n​\t下边从查询条件、查询列表两个方面分析数据模型 查询条件：\n包括：课程名称、课程审核状态、课程发布状态\n课程名称：可以模糊搜索\n课程审核状态：未提交、已提交、审核通过、审核未通过\n课程发布状态：未发布、已发布、已下线\n因为是分页查询所以查询条件中还要包括当前页码、每页显示记录数。\n查询结果：\n查询结果中包括：课程id、课程名称、任务数、创建时间、是否付费、审核状态、类型，操作 任务数：该课程所包含的课程计划数，即课程章节数。 是否付费：课程包括免费、收费两种。 类型：录播、直播。 因为是分页查询所以查询结果中还要包括总记录数、当前页、每页显示记录数。 3.2 创建数据库表及PO类型 3.2.1 创建数据库表 黑马所给的虚拟机中已经将数据库表全都建好，无需我们自己建表 若是想要自己建表，可以直接执行其给的sql语句文件。 3.2.2 生成PO类 PO即持久对象(Persistent Object)，它们是由一组属性和属性的get和set方法组成，PO对应于数据库的表。\n在开发持久层代码时需要根据数据表编写PO类，在实际开发中通常使用代码生成器（工具）生成PO类的代码。由于在需求分析阶段对数据模型进行分析，PO类对应于数据模型，所以在需求分析阶段即可使用工具生成PO类，为下面的接口定义准备好模型类。\n在企业开发中通常使用代码生成工具去自动生成这些文件，本项目使用mybatis-plus的generator工程生成PO类、Mapper接口、Mapper的xml文件，地址在：generator工程所在地址\n本项目可直接使用黑马提供的xuecheng-plus-generator工程，将其解压后，直接复制到项目的根目录下，并在idea中打开xuecheng-plus-generator工程的pom.xml，右键 点击“Add as Maven Project” 自动识别maven工程，即可。\n本次生成内容管理模块的PO类、Mapper接口和Mapper的xml文件 ，找到ContentCodeGenerator类，如下图：\n修改ContentCodeGenerator类中的信息，包括：数据库地址、数据库账号、数据库密码、生成的表、生成路径，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 //数据库账号 private static final String DATA_SOURCE_USER_NAME = \u0026#34;root\u0026#34;; //数据库密码 private static final String DATA_SOURCE_PASSWORD = \u0026#34;mysql\u0026#34;; //生成的表 private static final String[] TABLE_NAMES = new String[]{ \u0026#34;course_base\u0026#34;, \u0026#34;course_market\u0026#34;, \u0026#34;course_teacher\u0026#34;, \u0026#34;course_category\u0026#34;, \u0026#34;teachplan\u0026#34;, \u0026#34;teachplan_media\u0026#34;, \u0026#34;course_publish\u0026#34;, \u0026#34;course_publish_pre\u0026#34; }; // TODO 默认生成entity，需要生成DTO修改此变量 // 一般情况下要先生成 DTO类 然后修改此参数再生成 PO 类。 private static final Boolean IS_DTO = false; public static void main(String[] args) { .... //生成路径 gc.setOutputDir(System.getProperty(\u0026#34;user.dir\u0026#34;) + \u0026#34;/xuecheng-plus-generator/src/main/java\u0026#34;); .... // 数据库配置 DataSourceConfig dsc = new DataSourceConfig(); dsc.setDbType(DbType.MYSQL); dsc.setUrl(\u0026#34;jdbc:mysql://192.168.101.65:3306/xcplus_\u0026#34; + SERVICE_NAME+\u0026#34;166\u0026#34; + \u0026#34;?serverTimezone=UTC\u0026amp;useUnicode=true\u0026amp;useSSL=false\u0026amp;characterEncoding=utf8\u0026#34;); ... 修改完成，执行该类的main方法，自动生成content包，如下：\n在该包下自动生成了内容管理模块的controller、mapper、po及service相关代码，这里我们只需要po类。将po类拷贝到model工程中的po包下。\n打开一个PO类发现编译报错，这是缺少依赖包导致，本项目使用的持久层框架是MyBatisPlus，在生成的po类中加了一些MyBatisPlus框架的注解，这里需要添加MyBatisPlus框架的依赖，消除错误。下边在model工程添加依赖\n1 2 3 4 5 6 \u0026lt;!--存在mybatisplus注解添加相关注解保证不报错--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-plus-annotation\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mybatis-plus-boot-starter.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 3.3 设计接口 3.3.1 接口设计分析 设计一个接口需要包括以下几个方面：\n协议\n通常协议采用HTTP，查询类接口通常为get或post，查询条件较少的使用get，较多的使用post。本接口使用 http post。\n还要确定content-type，参数以什么数据格式提交，结果以什么数据格式响应。一般情况没有特殊情况结果以json 格式响应。\n分析请求参数\n根据前边对数据模型的分析，请求参数为：课程名称、课程审核状态、当前页码、每页显示记录数。根据分析的请求参数定义模型类。 分析响应结果\n根据前边对数据模型的分析，响应结果为数据列表加一些分页信息（总记录数、当前页、每页显示记录数）。\n数据列表中数据的属性包括：课程id、课程名称、任务数、创建时间、审核状态、类型。\n[!CAUTION]\n注意：查询结果中的审核状态为数据字典中的代码字段，前端会根据审核状态代码找到对应的名称显示。根据分析的响应结果定义模型类。\n分析完成，使用SpringBoot注解开发一个Http接口。\n使用接口文档工具查看接口的内容。\n接口中调用Service方法完成业务处理。\n接口请求示例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 POST /content/course/list?pageNo=2\u0026amp;pageSize=1 Content-Type: application/json ###请求参数 { \u0026#34;auditStatus\u0026#34;: \u0026#34;202002\u0026#34;, \u0026#34;courseName\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;publishStatus\u0026#34;:\u0026#34;\u0026#34; } ###成功响应结果 { \u0026#34;items\u0026#34;: [ { \u0026#34;id\u0026#34;: 26, \u0026#34;companyId\u0026#34;: 1232141425, \u0026#34;companyName\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;spring cloud实战\u0026#34;, \u0026#34;users\u0026#34;: \u0026#34;所有人\u0026#34;, \u0026#34;tags\u0026#34;: null, \u0026#34;mt\u0026#34;: \u0026#34;1-3\u0026#34;, \u0026#34;mtName\u0026#34;: null, \u0026#34;st\u0026#34;: \u0026#34;1-3-2\u0026#34;, \u0026#34;stName\u0026#34;: null, \u0026#34;grade\u0026#34;: \u0026#34;200003\u0026#34;, \u0026#34;teachmode\u0026#34;: \u0026#34;201001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;本课程主要从四个章节进行讲解： 1.微服务架构入门 2.spring cloud 基础入门 3.实战Spring Boot 4.注册中心eureka。\u0026#34;, \u0026#34;pic\u0026#34;: \u0026#34;https://cdn.educba.com/academy/wp-content/uploads/2018/08/Spring-BOOT-Interview-questions.jpg\u0026#34;, \u0026#34;createDate\u0026#34;: \u0026#34;2019-09-04 09:56:19\u0026#34;, \u0026#34;changeDate\u0026#34;: \u0026#34;2021-12-26 22:10:38\u0026#34;, \u0026#34;createPeople\u0026#34;: null, \u0026#34;changePeople\u0026#34;: null, \u0026#34;auditStatus\u0026#34;: \u0026#34;202002\u0026#34;, \u0026#34;auditMind\u0026#34;: null, \u0026#34;auditNums\u0026#34;: 0, \u0026#34;auditDate\u0026#34;: null, \u0026#34;auditPeople\u0026#34;: null, \u0026#34;status\u0026#34;: 1, \u0026#34;coursePubId\u0026#34;: null, \u0026#34;coursePubDate\u0026#34;: null } ], \u0026#34;counts\u0026#34;: 23, \u0026#34;page\u0026#34;: 2, \u0026#34;pageSize\u0026#34;: 1 } 3.3.2 定义模型类 根据接口分析需要定义模型类接收请求的参数，并定义模型类用于响应结果。\n分页查询模型类\n由于分页查询这一类的接口在项目较多，这里针对分页查询的参数（当前页码、每页显示记录数）单独在xuecheng-plus-base基础工程中定义。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package com.xuecheng.base.model; import lombok.Data; import lombok.ToString; import lombok.extern.java.Log; /** * @description 分页查询通用参数 * @author Mr.M * @date 2022/9/6 14:02 * @version 1.0 */ @Data @AllArgsConstructor @NoArgsConstructor public class PageParams { //当前页码 @ApiModelProperty(\u0026#34;当前页码\u0026#34;) private Long pageNo = 1L; //每页记录数默认值 @ApiModelProperty(\u0026#34;每页记录数\u0026#34;) private Long pageSize = 10L; } 由于上边类中用到了lombok注解所以在base工程添加依赖包如下：\n1 2 3 4 5 6 \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 查询条件模型类\n除了分页查询参数，剩下的就是课程查询的特有参数，此时需要在内容管理的model工程中定义课程查询参数模型类。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package com.xuecheng.content.model.dto; import io.swagger.annotations.ApiModelProperty; import lombok.Data; /** * @description 课程查询参数Dto */ @Data public class QueryCourseParamsDto { //审核状态 @ApiModelProperty(\u0026#34;审核状态\u0026#34;) private String auditStatus; //课程名称 @ApiModelProperty(\u0026#34;课程名称\u0026#34;) private String courseName; //发布状态 @ApiModelProperty(\u0026#34;发布状态\u0026#34;) private String publishStatus; } 响应模型类\n根据接口分析，下边定义响应结果模型类。针对分页查询结果经过分析也存在固定的数据和格式，所以在base工程定义一个基础的模型类。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.xuecheng.base.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.io.Serializable; import java.util.List; /** * 分页查询结果模型类 */ @Data @NoArgsConstructor @AllArgsConstructor public class PageResult\u0026lt;T\u0026gt; implements Serializable { // 数据列表 private List\u0026lt;T\u0026gt; items; //总记录数 private long counts; //当前页码 private long page; //每页记录数 private long pageSize; } 此模型类中定义了List属性，此属性存放数据列表，且支持泛型，课程查询接口的返回类型可以是此模型类型。课程查询接口使用的泛型为相应的CourseBase，即生成的课程基本信息表的PO类。\n3.3.3 定义接口 ","date":"2024-10-04T00:00:00Z","image":"https://lazman-ll.github.io/github-hugo.png","permalink":"https://lazman-ll.github.io/p/%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97/","title":"学成在线内容管理模块"},{"content":"本文描述了黑马springcloud项目学成在线的环境搭建过程\n1 开发工具版本 本项目主要使用的开发工具列表如下所示：\n开发工具 版本号 安装位置 IntelliJ-IDEA 2021.x以上版本 个人电脑 JDK 1.8.x 个人电脑 Maven 3.8.x以上版本 个人电脑 Git 2.37.x 个人电脑 VMware-workstation 16.x 个人电脑 CentOS 7.x 虚拟机 Docker 18.09.0 虚拟机 Mysql 8.x docker nacos 1.4.1 docker rabbitmq 3.8.34 docker redis 6.2.7 docker xxl-job-admin 2.3.1 docker minio RELEASE.2022-09-07 docker elasticsearch 7.12.1 docker kibana 7.12.1 docker gogs 0.13.0 docker nginx 1.12.2 docker 2 IDEA 环境配置 2.1 创建GitHub仓库 2.2 在IDEA中拉取GitHub中的仓库 创建项目时，选择通过版本控制创建项目(Get from VCS)\n输入仓库地址，并选择工程路径。\n2.3 编码配置 2.4 设置Java编译级别 本项目使用jdk8作为项目语言环境，故需要设置Java的编译环境：\n工程创建成功后，点击Project Structure：\n点击Project，设置SDK为1.8及Project language level，如下图：\n3 Maven 环境 3.1 配置maven仓库 解压课程资料中的maven仓库下的repository.zip到你的maven工作目录(或者随便一个目录)中\n在maven的conf目录中的setting.xml文件中配置本地仓库的地址，为刚才repository.zip的地址\n​\t3.2 IDEA中配置maven 在IDEA中配置maven：进入 File \u0026ndash;\u0026gt; Settings \u0026ndash;\u0026gt; Build \u0026ndash;\u0026gt; Build Tools \u0026ndash;\u0026gt; Maven，配置maven安装目录、setting.xml及本地仓库的位置。\n​\t①代表你的maven安装的位置，若以前用过maven，一般不用修改\n②代表你的maven的配置文件所在地址\n③代表你使用的本地仓库的地址(注意：最后一级目录是你所有依赖的前一级)\n4 安装虚拟机 项目中用到的一些服务端软件如：MySQL、Nacos配置中心、RabbitMQ消息队列等通常会安装在企业局域网的服务器中，开发人员去远程连接它们。在本项目中我们在自己的电脑上安装虚拟机，虚拟机代表了企业局域网中的服务器。\n服务器操作系统使用Centos7，导入黑马课程中的虚拟机文件(包含了所有的需要安装的服务端软件)，也可以自行安装Centos7虚拟机(服务端软件需要自己安装)。\n4.1 设置虚拟机网络 点击 “编辑\u0026ndash;》虚拟网络编辑器”配置网络地址，地址须与下图一致。\n设置子网IP：192.168.101.0，子网掩码：255.255.255.0。\n4.2 导入虚拟机 解压课程资料中的虚拟机文件，进入解压后的文件夹，双击\u0026quot;CentOS 7 64 位.vmx\u0026quot; 文件，选择复制虚拟机。(博主在实操过程中并未出现复制虚拟机选项，而是直接跳转到了vm界面中，但是在开启该虚拟机时，有一个选项要求我选择\u0026quot;已复制虚拟机\u0026quot;或\u0026quot;已移动虚拟机\u0026quot;，我选择了已复制，此处不知是否有问题？)\n注意：虚拟机的IP地址为192.168.101.65，不用修改IP地址。\n4.3 远程连接虚拟机 博主使用了MobaXterm 远程连接虚拟机中的CentOs系统，具体连接过程可自行上网搜索\nIP地址：192.168.101.65\n账号与密码为：root/centos\n连接完毕执行以下命令\n执行 systemctl start docker 启动docker。\n运行： sh /data/soft/restart.sh\n查询docker容器：docker ps，执行完毕后，docker容器运行情况如下图：\n​\t4.3 数据库客户端连接虚拟机中的MySQL 博主使用的Navicat进行连接\n所有数据库信息如下：其中包含了本项目所有要用的数据库，一般以后无需创建\n​\t5 Git环境配置 5.1 添加.gitignore文件 ​\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 HELP.md target/ !.mvn/wrapper/maven-wrapper.jar !**/src/main/** !**/src/test/** ### STS ### .apt_generated .classpath .factorypath .project .settings .springBeans .sts4-cache ### IntelliJ IDEA ### .idea *.iws *.iml *.ipr ### NetBeans ### /nbproject/private/ /nbbuild/ /dist/ /nbdist/ /.nb-gradle/ build/ logs/ ### VS Code ### .vscode/ 提交到git仓库当中\n5.2 创建开发分支 通常不会在主分支进行开发，本项目在dev开发分支进行开发(每一章节一个)，下边创建开发分支。\n新建一个分支，点击IDEA右下角的分支标识：\n输入分支名称：\n​\t点击create即创建成功，打卡Git log，其中标识了小铅笔的就是当前分支\n然后将分支push到github上即可\n6 基础工程搭建 6.1 工程结构关系 学成在线使用 Maven 来进行项目的管理和构建。整个项目分为三大类工程：父工程、基础工程 和微服务工程。\n​\t每一种类的工程都有不同的作用，下面时对其功能进行说明：\n父工程\n对依赖包的版本进行管理\n本身为Pom工程，对子工程进行聚合管理\n基础工程\n继承父类工程\n提供基础类库\n提供工具类库\n微服务工程\n分别从业务、技术方面划分模块，每个模块构建为一个微服务。\n每个微服务工程依赖基础工程，间接继承父工程。\n包括：内容管理服务、媒资管理服务、搜索服务、订单支付服务等。\n6.2 构建父工程 父工程的职责是对依赖包的版本进行管理，本小节创建父工程分两步，第一创建父工程，第二在pom.xml编辑依赖管理。\n首先创建父工程，为了对代码更好的进行权限管理，这里我们单独创建父工程。选择Spring Initalizr，填写模块信息：\n模块名：xuecheng-plus-parent\n包名：com.xuecheng\n依赖管理定义\n下边开始编辑xuecheng-plus-parent父工程的依赖管理 。\n父工程中没有代码，不用去依赖其它的包，它的作用是限定其它子工程依赖包的版本号，即在dependencyManagement 中去编辑即可。\n确定父工程为一个pom工程，在pom.xml中添加如下内容：\n\u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt;\n编辑依赖的包的版本号、打包插件等。\nu0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;xuecheng-plus-parent\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;xuecheng-plus-parent\u0026lt;/description\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt; \u0026lt;spring-boot.version\u0026gt;2.3.7.RELEASE\u0026lt;/spring-boot.version\u0026gt; \u0026lt;spring-cloud.version\u0026gt;Hoxton.SR9\u0026lt;/spring-cloud.version\u0026gt; \u0026lt;org.mapstruct.version\u0026gt;1.3.1.Final\u0026lt;/org.mapstruct.version\u0026gt; \u0026lt;spring-cloud-alibaba.version\u0026gt;2.2.6.RELEASE\u0026lt;/spring-cloud-alibaba.version\u0026gt; \u0026lt;org.projectlombok.version\u0026gt;1.18.8\u0026lt;/org.projectlombok.version\u0026gt; \u0026lt;javax.servlet-api.version\u0026gt;4.0.1\u0026lt;/javax.servlet-api.version\u0026gt; \u0026lt;fastjson.version\u0026gt;1.2.83\u0026lt;/fastjson.version\u0026gt; \u0026lt;druid-spring-boot-starter.version\u0026gt;1.2.8\u0026lt;/druid-spring-boot-starter.version\u0026gt; \u0026lt;mysql-connector-java.version\u0026gt;8.0.30\u0026lt;/mysql-connector-java.version\u0026gt; \u0026lt;mybatis-plus-boot-starter.version\u0026gt;3.4.1\u0026lt;/mybatis-plus-boot-starter.version\u0026gt; \u0026lt;commons-lang.version\u0026gt;2.6\u0026lt;/commons-lang.version\u0026gt; \u0026lt;minio.version\u0026gt;8.4.3\u0026lt;/minio.version\u0026gt; \u0026lt;xxl-job-core.version\u0026gt;2.3.1\u0026lt;/xxl-job-core.version\u0026gt; \u0026lt;swagger-annotations.version\u0026gt;1.5.20\u0026lt;/swagger-annotations.version\u0026gt; \u0026lt;commons-lang3.version\u0026gt;3.10\u0026lt;/commons-lang3.version\u0026gt; \u0026lt;okhttp.version\u0026gt;4.8.1\u0026lt;/okhttp.version\u0026gt; \u0026lt;swagger-spring-boot-starter.version\u0026gt;1.9.0.RELEASE\u0026lt;/swagger-spring-boot-starter.version\u0026gt; \u0026lt;elasticsearch.version\u0026gt;7.12.1\u0026lt;/elasticsearch.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-boot.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud-alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- lombok，简化类的构建--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${org.projectlombok.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- mapstruct 代码生成器，简化java bean之间的映射 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mapstruct\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapstruct-jdk8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${org.mapstruct.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mapstruct\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapstruct-processor\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${org.mapstruct.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.swagger\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;swagger-annotations\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${swagger-annotations.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Servlet 容器管理 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.servlet-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${javax.servlet-api.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- fastjson ，json解析工具 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${fastjson.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- druid 连接池管理 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${druid-spring-boot-starter.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- mySQL数据库驱动包管理 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mysql-connector-java.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- mybatis plus 集成Spring Boot启动器 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-plus-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mybatis-plus-boot-starter.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- mybatis plus 代码生成器 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-plus-generator\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mybatis-plus-boot-starter.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 工具类管理 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-lang\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${commons-lang.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 分布式文件系统 minIO的客户端API包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.minio\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;minio\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${minio.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--google推荐的一套工具类库--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;25.0-jre\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--分布式任务调度--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xuxueli\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;xxl-job-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${xxl-job-core.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--Spring boot单元测试--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-boot.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.junit.vintage\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-vintage-engine\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.squareup.okhttp3\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;okhttp\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${okhttp.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang3\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${commons-lang3.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.spring4all\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;swagger-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${swagger-spring-boot-starter.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.elasticsearch.client\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;elasticsearch-rest-high-level-client\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${elasticsearch.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.elasticsearch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;elasticsearch\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${elasticsearch.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;finalName\u0026gt;${project.name}\u0026lt;/finalName\u0026gt; \u0026lt;!--编译打包过虑配置--\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;resource\u0026gt; \u0026lt;directory\u0026gt;src/main/resources\u0026lt;/directory\u0026gt; \u0026lt;filtering\u0026gt;true\u0026lt;/filtering\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;**/*\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/resource\u0026gt; \u0026lt;resource\u0026gt; \u0026lt;directory\u0026gt;src/main/java\u0026lt;/directory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;**/*.xml\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/resource\u0026gt; \u0026lt;/resources\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;!--指定项目源码jdk的版本--\u0026gt; \u0026lt;source\u0026gt;1.8\u0026lt;/source\u0026gt; \u0026lt;!--指定项目编译后的jdk的版本--\u0026gt; \u0026lt;target\u0026gt;1.8\u0026lt;/target\u0026gt; \u0026lt;!--配置注解预编译--\u0026gt; \u0026lt;annotationProcessorPaths\u0026gt; \u0026lt;path\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${org.projectlombok.version}\u0026lt;/version\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/annotationProcessorPaths\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;!--责处理项目资源文件并拷贝到输出目录，如果有额外的资源文件目录则需要配置--\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-resources-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;encoding\u0026gt;utf-8\u0026lt;/encoding\u0026gt; \u0026lt;!--使用默认分隔符，resource中可以使用分割符定义过虑的路径--\u0026gt; \u0026lt;useDefaultDelimiters\u0026gt;true\u0026lt;/useDefaultDelimiters\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 6.3 构建基础工程 基础工程的职责是提供一些系统架构所需要的基础类库以及一此工具类库。\n首先创建基础工程xuecheng-plus-base。创建的过程同父工程的创建过程，选择Spring Initalizr，填写模块信息：\n模块名：xuecheng-plus-base 包名：com.xuecheng 修改pom.xml文件\n这里需要注意的是xuecheng-plus-base的父工程为xuecheng-plus-parent，xuecheng-plus-base的pom.xml的如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;com.xuecheng\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;relativePath\u0026gt;../xuecheng-plus-parent\u0026lt;/relativePath\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;xuecheng-plus-base\u0026lt;/artifactId\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang3\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- fast Json --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- servlet Api 依赖 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.servlet-api\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 通用组件 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-lang\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-codec\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-codec\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.swagger\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;swagger-annotations\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-validation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-log4j2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--根据扩展名取mimetype--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.j256.simplemagic\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;simplemagic\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.17\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang3\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.zxing\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.zxing\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javase\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.module\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-module-parameter-names\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.datatype\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-datatype-jdk8\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.datatype\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-datatype-jsr310\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 最后将父工程和基础工程提交到git上即可。\n","date":"2024-10-02T00:00:00Z","image":"https://lazman-ll.github.io/p/%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://lazman-ll.github.io/p/%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","title":"学成在线环境搭建"},{"content":"本博客使用了Hugo+Github的方法进行博客搭建，博客的搭建日期为2024-10-01，本文首次更新日期为2024-10-01，下面将详细介绍本博客的搭建方法。\nHugo的搭建 1.1 hugo的下载 进入Hugo下载地址网址选择最新的版本，当前最新版本为：v0.135.0，点击进入\nwindows环境：选择 hugo_extended_0.135.0_windows-amd64.zip，进行下载，并解压。\n1.2 创建博客 在解压后得到的文件的目录下进入命令行窗口，输入hugo new site xxxx（xxxx写文件的名字，自己取即可）以创建hugo文件\n将解压得到的hugo.exe复制到创建好的hugo文件中，然后输入cd xxxx 切换目录\n1.3 配置主题 前往Hugo Themes，挑选喜欢的主图，进行下载，这里我选用了stack主题\n以Stack主题为例，将下载好的主题解压，放到xxxx/themes文件夹下\n将exampleSite文件夹下的content文件夹以及hugo.yaml文件，复制到主文件夹下(即前面的xxxx，后面都为主文件夹)，并删除掉hugo.toml和content/post/rich-content\n修改hugo.yaml中的theme配置，将其修改为与主题的文件夹名一致，或者反过来修改主题文件夹名，只要保证两者一致即可。\n在命令行中键入hugo server -D，启动hugo服务，查看主题，具体的主题配置修改hugo.yaml即可，详情可看 Hugo 主题 Stack (中文)(非官方)或者Hugo 主题 Stack(官方)\nGithub搭建 此处需要git和GitHub账号，可自行在网上查找如何配置\n2.1 静态界面部署 进入GitHub，创建仓库**{github用户名}.github.io**，并设置为public\n前往Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启https://{github用户名}.github.io的地址，该地址即博客地址\n修改hugo.yaml的baseurl为https://{github用户名}.github.io\n在主文件夹下进入命令行，键入huge -D，会生成public静态资源文件夹\n在public下进入命令行，依次执行如下命令，将资源上传到Github中，下面的命令在你的Github创建成功仓库的界面有，直接复制即可(第二条命令要与下面的一致)\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 上传成功后即可访问https://{github用户名}.github.io，查看自己的博客\n2.2 hugo部署(实现Github Action自动部署) 在Github中创建一个新的仓库，存放hugo主文件，此处设置为private即可\n前往Setttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)，有效期选择永久，(否则失效后需要重新配置，但是若为了安全，可以自行选择)，勾选repo和workflow，创建。\n将生成的token，保存在仓库的变量中，进入刚刚创建的仓库，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置\n在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看Github Action文档\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 在hugo主文件创建.gitignore文件，来避免提交不必要的文件\n将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 以后修改了文件后就无需输入上述这么多命令，在主文件夹下进入命令行，输入如下命令即可，有时候git push失败可以多试几次\n1 2 3 git add . git commit -m \u0026#34;update\u0026#34; git push ","date":"2024-10-01T00:00:00Z","image":"https://lazman-ll.github.io/p/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/github-hugo_hu12902404653766232079.png","permalink":"https://lazman-ll.github.io/p/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"博客搭建"}]